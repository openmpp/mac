#!/usr/bin/env bash
#
# create zip archive of openM++ build from ompp sub-directory: openmpp_mac_YYYYMMDD.tar.gz
# environmemnt variables:
#  OM_MSG_USE=MPI                 (default: EMPTY)
#  MODEL_DIRS=modelOne,NewCaseBased,NewTimeBased,NewCaseBased_bilingual,NewTimeBased_bilingual,IDMM,OzProj,OzProjGen,RiskPaths,RiskPaths_csv

if [ -n "$OM_MSG_USE" ] && [ "$OM_MSG_USE" != 'EMPTY' ] && [ "$OM_MSG_USE" != 'MPI' ]; then
  echo Error: incorrect value: $OM_MSG_USE, must be one of: MPI or EMPTY
  exit 1    
fi

[ "$OM_MSG_USE" = 'MPI' ] && OM_SFX_MPI=_mpi || OM_SFX_MPI=

[ -n "$MODEL_DIRS" ] && \
  OM_BLD_MDLS=${MODEL_DIRS//,/ } || \
  OM_BLD_MDLS="modelOne NewCaseBased NewTimeBased NewCaseBased_bilingual NewTimeBased_bilingual IDMM OzProj OzProjGen RiskPaths RiskPaths_csv"

# push into ompp root and make log directory if not exist

if [ ! -d ompp ]; then
  echo ERROR: missing source code directory: ompp
  exit 1
fi

pushd ompp
OM_ROOT=$PWD

if [ ! -d log ]; then mkdir log; fi

# get current date in UTC time zone, CPU architecture and set archive name

OM_DATE_STAMP=`date -u +%Y%m%d`
CPU_ARCH=`uname -m`

DEPLOY_NAME=openmpp_mac${OM_SFX_MPI}_${CPU_ARCH}_${OM_DATE_STAMP}
DEPLOY_DIR=../$DEPLOY_NAME
DEPLOY_GZ=$DEPLOY_NAME.tar.gz

# log build environment 

echo Log file: log/build-tar-gz.log
echo `date` Pack openM++ build | tee log/build-tar-gz.log
echo Environment: | tee -a log/build-tar-gz.log
echo " OM_MSG_USE = $OM_MSG_USE" | tee -a log/build-tar-gz.log
echo " OM_ROOT    = $OM_ROOT" | tee -a log/build-tar-gz.log
echo " MODEL_DIRS = $MODEL_DIRS" | tee -a log/build-tar-gz.log
echo " DEPLOY_DIR = $DEPLOY_DIR" | tee -a log/build-tar-gz.log
echo Pack into: $DEPLOY_GZ | tee -a log/build-tar-gz.log

# execute command, log results and exit on errors
do_cmd()
{
  echo $@ | tee -a log/build-tar-gz.log
  
  if ! $@ >> log/build-tar-gz.log 2>&1;
  then
    echo FAILED. | tee -a log/build-tar-gz.log
    exit 1
  fi
}

# set dotglob to copy all files from source to destination directory
do_cp_all()
{
  (
    shopt -s dotglob
    for f in $1/*; do
      if [ -f $f ]; then do_cmd cp -p $f $2/ || exit 1; fi
    done
  ) 
  if [ $? -ne 0 ]; 
  then
    echo FAILED on file copy.
    exit 1
  fi
}

# delete existing pack directory and zip file

if [ -e $DEPLOY_DIR ]; then do_cmd rm -rf $DEPLOY_DIR; fi
if [ -e ../$DEPLOY_GZ ];  then do_cmd rm -rf ../$DEPLOY_GZ; fi

# create new deploy directory
# copy top level sub-directories and files

do_cmd mkdir $DEPLOY_DIR
do_cmd mkdir $DEPLOY_DIR/log

echo Copy files: | tee -a log/build-tar-gz.log

do_cp_all . $DEPLOY_DIR

do_cmd cp -pr Excel    $DEPLOY_DIR
do_cmd cp -pr include  $DEPLOY_DIR
do_cmd cp -pr licenses $DEPLOY_DIR
do_cmd cp -pr openm    $DEPLOY_DIR
do_cmd cp -pr Perl     $DEPLOY_DIR
do_cmd cp -pr props    $DEPLOY_DIR
do_cmd cp -pr sql      $DEPLOY_DIR
do_cmd cp -pr use      $DEPLOY_DIR
do_cmd cp -pr Xcode    $DEPLOY_DIR

# copy openm bin directory

do_cmd cp -pr bin $DEPLOY_DIR
[ -e $DEPLOY_DIR/bin/omcD ] && do_cmd rm -v $DEPLOY_DIR/bin/omcD

# copy openm runtime libraries

do_cmd mkdir $DEPLOY_DIR/lib

do_cmd cp -p lib/libopenm${OM_SFX_MPI}.a lib/libsqlite.a $DEPLOY_DIR/lib
[ -e lib/libopenmD${OM_SFX_MPI}.a ] && do_cmd cp -p lib/libopenmD${OM_SFX_MPI}.a $DEPLOY_DIR/lib
[ -e lib/libsqliteD.a ] &&             do_cmd cp -p lib/libsqliteD.a             $DEPLOY_DIR/lib

# copy Go bin executables and source code

do_cmd cp -p bin/dbcopy $DEPLOY_DIR/bin
do_cmd cp -p bin/oms    $DEPLOY_DIR/bin

do_cmd mkdir $DEPLOY_DIR/ompp-go

do_cp_all ompp-go $DEPLOY_DIR/ompp-go

do_cmd cp -pr ompp-go/dbcopy   $DEPLOY_DIR/ompp-go
do_cmd cp -pr ompp-go/ompp     $DEPLOY_DIR/ompp-go
do_cmd cp -pr ompp-go/oms      $DEPLOY_DIR/ompp-go
do_cmd cp -pr ompp-go/etc      $DEPLOY_DIR/ompp-go
do_cmd cp -pr ompp-go/licenses $DEPLOY_DIR/ompp-go

# copy template files to run models

do_cmd mkdir $DEPLOY_DIR/etc
do_cmd mkdir $DEPLOY_DIR/etc/scripts

#
# MacOS
#

do_cmd cp -p ompp-go/etc/runLinuxMacOS.Debug.template.txt $DEPLOY_DIR/etc/run.Debug.template.txt

# do_cmd cp -p ompp-go/etc/mpiLinux.openMPI.template.txt $DEPLOY_DIR/etc/mpi.ModelRun.template.txt
#
# end of MacOS
#

do_cmd cp -p ompp-go/etc/runLinuxMacOS.OzProj.template.txt          $DEPLOY_DIR/etc/run.OzProj.template.txt
do_cmd cp -p ompp-go/etc/runLinuxMacOS.OzProj.Debug.template.txt    $DEPLOY_DIR/etc/run.OzProj.Debug.template.txt
do_cmd cp -p ompp-go/etc/runLinuxMacOS.OzProjGen.template.txt       $DEPLOY_DIR/etc/run.OzProjGen.template.txt
do_cmd cp -p ompp-go/etc/runLinuxMacOS.OzProjGen.Debug.template.txt $DEPLOY_DIR/etc/run.OzProjGen.Debug.template.txt

do_cmd cp -p ompp-go/etc/scripts/*.sh $DEPLOY_DIR/etc/scripts

# get Docker source code from git and copy Docker sources

if [ ! -d ompp-docker ]; then
  do_cmd git clone https://github.com/openmpp/docker ompp-docker
fi

do_cmd mkdir $DEPLOY_DIR/ompp-docker

do_cp_all ompp-docker $DEPLOY_DIR/ompp-docker

do_cmd cp -pr ompp-docker/ompp-build-win      $DEPLOY_DIR/ompp-docker
do_cmd cp -pr ompp-docker/ompp-run-win        $DEPLOY_DIR/ompp-docker
do_cmd cp -pr ompp-docker/ompp-build-debian   $DEPLOY_DIR/ompp-docker
do_cmd cp -pr ompp-docker/ompp-build-centos   $DEPLOY_DIR/ompp-docker
do_cmd cp -pr ompp-docker/ompp-run-debian     $DEPLOY_DIR/ompp-docker
do_cmd cp -pr ompp-docker/ompp-run-centos     $DEPLOY_DIR/ompp-docker

# get Python source code from git and copy Python sources

if [ ! -d ompp-python ]; then
  do_cmd git clone https://github.com/openmpp/python ompp-python
fi

do_cmd mkdir $DEPLOY_DIR/ompp-python

do_cp_all ompp-python $DEPLOY_DIR/ompp-python

do_cmd cp -pr ompp-python/images $DEPLOY_DIR/ompp-python

# copy R package and source code

do_cmd mkdir $DEPLOY_DIR/ompp-r

do_cp_all ompp-r $DEPLOY_DIR/ompp-r

do_cmd cp -pr ompp-r/openMpp $DEPLOY_DIR/ompp-r

# copy UI html build and source code

do_cmd cp -pr ompp-ui/dist/spa   $DEPLOY_DIR/html

do_cmd mkdir $DEPLOY_DIR/ompp-ui

do_cp_all ompp-ui $DEPLOY_DIR/ompp-ui

do_cmd cp -pr ompp-ui/.quasar  $DEPLOY_DIR/ompp-ui/.quasar
do_cmd cp -pr ompp-ui/.vscode  $DEPLOY_DIR/ompp-ui/.vscode
do_cmd cp -pr ompp-ui/licenses $DEPLOY_DIR/ompp-ui/licenses
do_cmd cp -pr ompp-ui/public   $DEPLOY_DIR/ompp-ui/public
do_cmd cp -pr ompp-ui/src      $DEPLOY_DIR/ompp-ui/src

# copy models

do_cmd mkdir -p $DEPLOY_DIR/models/bin
do_cmd mkdir -p $DEPLOY_DIR/models/sql
do_cmd mkdir -p $DEPLOY_DIR/models/log
do_cmd mkdir -p $DEPLOY_DIR/models/home

do_cp_all models $DEPLOY_DIR/models

do_cmd cp -p models/bin/* $DEPLOY_DIR/models/bin
do_cmd cp -p models/sql/* $DEPLOY_DIR/models/sql

for M in $OM_BLD_MDLS; do

  do_cmd cp -pr models/$M $DEPLOY_DIR/models/$M

  do_cmd rm -rf $DEPLOY_DIR/models/$M/ompp-linux
  do_cmd rm -rf $DEPLOY_DIR/models/$M/ompp-mac
  
done

if [ ! -d $DEPLOY_DIR/models/Alpha2 ]; then
  do_cmd cp -pr models/Alpha2 $DEPLOY_DIR/models/

  do_cmd rm -rf $DEPLOY_DIR/models/Alpha2/ompp-linux
  do_cmd rm -rf $DEPLOY_DIR/models/Alpha2/ompp-mac
fi

if [ -d $DEPLOY_DIR/models/OzProj ]; then
  do_cmd mkdir -p $DEPLOY_DIR/models/OzProj/ompp/bin
fi

if [ -d $DEPLOY_DIR/models/OzProjGen ]; then
  do_cmd mkdir -p $DEPLOY_DIR/models/OzProjGen/ompp/bin
fi

#
# MacOS
#

do_cmd mkdir -p $DEPLOY_DIR/ompp-mac

do_cp_all ../ompp-mac $DEPLOY_DIR/ompp-mac

do_cmd cp -pr "../ompp-mac/build"    $DEPLOY_DIR/ompp-mac/
do_cmd cp -pr "../ompp-mac/pictures" $DEPLOY_DIR/ompp-mac/

# MacOS: cleanup

do_cmd xattr -rc "$DEPLOY_DIR"

do_cmd find $DEPLOY_DIR -name ".DS_Store" -delete
do_cmd find $DEPLOY_DIR -name "*.ipa" -delete
do_cmd find $DEPLOY_DIR -name ".dSYM.zip" -delete
do_cmd find $DEPLOY_DIR -name ".dSYM" -delete
do_cmd find $DEPLOY_DIR -name ".AppleDouble" -delete
do_cmd find $DEPLOY_DIR -name ".LSOverride" -delete
do_cmd find $DEPLOY_DIR -name "._*" -delete
#
# end of MacOS
#

# build completed

echo Build completed on:  ${OM_DATE_STAMP:0:4}-${OM_DATE_STAMP:4:2}-${OM_DATE_STAMP:6:2} > $DEPLOY_DIR/build_date.txt

popd

# create tar.gz archive from deployment directory

echo Create $DEPLOY_GZ | tee -a ompp/log/build-tar-gz.log
echo tar czf $DEPLOY_GZ $DEPLOY_NAME | tee -a ompp/log/build-tar-gz.log
  
if ! tar czf $DEPLOY_GZ $DEPLOY_NAME >> ompp/log/build-tar-gz.log 2>&1;
then
  echo FAILED. | tee -a ompp/log/build-tar-gz.log
  exit 1
fi

echo `date` Done. | tee -a ompp/log/build-tar-gz.log
